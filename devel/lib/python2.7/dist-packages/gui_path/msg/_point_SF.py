# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gui_path/point_SF.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class point_SF(genpy.Message):
  _md5sum = "8458c087980b4ac9293991435741c6cd"
  _type = "gui_path/point_SF"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 s_x
int64 s_y
int64 f_x
int64 f_y
int64 step_size
int64 bias_param
int64 max_iteration
"""
  __slots__ = ['s_x','s_y','f_x','f_y','step_size','bias_param','max_iteration']
  _slot_types = ['int64','int64','int64','int64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       s_x,s_y,f_x,f_y,step_size,bias_param,max_iteration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(point_SF, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.s_x is None:
        self.s_x = 0
      if self.s_y is None:
        self.s_y = 0
      if self.f_x is None:
        self.f_x = 0
      if self.f_y is None:
        self.f_y = 0
      if self.step_size is None:
        self.step_size = 0
      if self.bias_param is None:
        self.bias_param = 0
      if self.max_iteration is None:
        self.max_iteration = 0
    else:
      self.s_x = 0
      self.s_y = 0
      self.f_x = 0
      self.f_y = 0
      self.step_size = 0
      self.bias_param = 0
      self.max_iteration = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7q.pack(_x.s_x, _x.s_y, _x.f_x, _x.f_y, _x.step_size, _x.bias_param, _x.max_iteration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.s_x, _x.s_y, _x.f_x, _x.f_y, _x.step_size, _x.bias_param, _x.max_iteration,) = _struct_7q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7q.pack(_x.s_x, _x.s_y, _x.f_x, _x.f_y, _x.step_size, _x.bias_param, _x.max_iteration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.s_x, _x.s_y, _x.f_x, _x.f_y, _x.step_size, _x.bias_param, _x.max_iteration,) = _struct_7q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7q = struct.Struct("<7q")
