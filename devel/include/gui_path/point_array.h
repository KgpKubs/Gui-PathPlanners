// Generated by gencpp from file gui_path/point_array.msg
// DO NOT EDIT!


#ifndef GUI_PATH_MESSAGE_POINT_ARRAY_H
#define GUI_PATH_MESSAGE_POINT_ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gui_path/path_point.h>
#include <gui_path/path_point.h>

namespace gui_path
{
template <class ContainerAllocator>
struct point_array_
{
  typedef point_array_<ContainerAllocator> Type;

  point_array_()
    : point_array()
    , obstacle_array()  {
    }
  point_array_(const ContainerAllocator& _alloc)
    : point_array(_alloc)
    , obstacle_array(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::gui_path::path_point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::gui_path::path_point_<ContainerAllocator> >::other >  _point_array_type;
  _point_array_type point_array;

   typedef std::vector< ::gui_path::path_point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::gui_path::path_point_<ContainerAllocator> >::other >  _obstacle_array_type;
  _obstacle_array_type obstacle_array;




  typedef boost::shared_ptr< ::gui_path::point_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gui_path::point_array_<ContainerAllocator> const> ConstPtr;

}; // struct point_array_

typedef ::gui_path::point_array_<std::allocator<void> > point_array;

typedef boost::shared_ptr< ::gui_path::point_array > point_arrayPtr;
typedef boost::shared_ptr< ::gui_path::point_array const> point_arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gui_path::point_array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gui_path::point_array_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gui_path

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'gui_path': ['/home/ashish/robocup/src/gui_path/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gui_path::point_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gui_path::point_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gui_path::point_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gui_path::point_array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gui_path::point_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gui_path::point_array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gui_path::point_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0e06ff95926b2506bb2cdfd45f68485";
  }

  static const char* value(const ::gui_path::point_array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0e06ff95926b250ULL;
  static const uint64_t static_value2 = 0x6bb2cdfd45f68485ULL;
};

template<class ContainerAllocator>
struct DataType< ::gui_path::point_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gui_path/point_array";
  }

  static const char* value(const ::gui_path::point_array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gui_path::point_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_point[] point_array\n\
path_point[] obstacle_array\n\
================================================================================\n\
MSG: gui_path/path_point\n\
int64 x\n\
int64 y\n\
";
  }

  static const char* value(const ::gui_path::point_array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gui_path::point_array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point_array);
      stream.next(m.obstacle_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct point_array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gui_path::point_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gui_path::point_array_<ContainerAllocator>& v)
  {
    s << indent << "point_array[]" << std::endl;
    for (size_t i = 0; i < v.point_array.size(); ++i)
    {
      s << indent << "  point_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gui_path::path_point_<ContainerAllocator> >::stream(s, indent + "    ", v.point_array[i]);
    }
    s << indent << "obstacle_array[]" << std::endl;
    for (size_t i = 0; i < v.obstacle_array.size(); ++i)
    {
      s << indent << "  obstacle_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gui_path::path_point_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacle_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GUI_PATH_MESSAGE_POINT_ARRAY_H
