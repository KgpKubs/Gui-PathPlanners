// Generated by gencpp from file gui_path/point_SF.msg
// DO NOT EDIT!


#ifndef GUI_PATH_MESSAGE_POINT_SF_H
#define GUI_PATH_MESSAGE_POINT_SF_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gui_path
{
template <class ContainerAllocator>
struct point_SF_
{
  typedef point_SF_<ContainerAllocator> Type;

  point_SF_()
    : s_x(0)
    , s_y(0)
    , f_x(0)
    , f_y(0)
    , step_size(0)
    , bias_param(0)
    , max_iteration(0)  {
    }
  point_SF_(const ContainerAllocator& _alloc)
    : s_x(0)
    , s_y(0)
    , f_x(0)
    , f_y(0)
    , step_size(0)
    , bias_param(0)
    , max_iteration(0)  {
  (void)_alloc;
    }



   typedef int64_t _s_x_type;
  _s_x_type s_x;

   typedef int64_t _s_y_type;
  _s_y_type s_y;

   typedef int64_t _f_x_type;
  _f_x_type f_x;

   typedef int64_t _f_y_type;
  _f_y_type f_y;

   typedef int64_t _step_size_type;
  _step_size_type step_size;

   typedef int64_t _bias_param_type;
  _bias_param_type bias_param;

   typedef int64_t _max_iteration_type;
  _max_iteration_type max_iteration;




  typedef boost::shared_ptr< ::gui_path::point_SF_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gui_path::point_SF_<ContainerAllocator> const> ConstPtr;

}; // struct point_SF_

typedef ::gui_path::point_SF_<std::allocator<void> > point_SF;

typedef boost::shared_ptr< ::gui_path::point_SF > point_SFPtr;
typedef boost::shared_ptr< ::gui_path::point_SF const> point_SFConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gui_path::point_SF_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gui_path::point_SF_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gui_path

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'gui_path': ['/home/ashish/robocup/src/gui_path/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gui_path::point_SF_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gui_path::point_SF_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gui_path::point_SF_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gui_path::point_SF_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gui_path::point_SF_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gui_path::point_SF_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gui_path::point_SF_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8458c087980b4ac9293991435741c6cd";
  }

  static const char* value(const ::gui_path::point_SF_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8458c087980b4ac9ULL;
  static const uint64_t static_value2 = 0x293991435741c6cdULL;
};

template<class ContainerAllocator>
struct DataType< ::gui_path::point_SF_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gui_path/point_SF";
  }

  static const char* value(const ::gui_path::point_SF_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gui_path::point_SF_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 s_x\n\
int64 s_y\n\
int64 f_x\n\
int64 f_y\n\
int64 step_size\n\
int64 bias_param\n\
int64 max_iteration\n\
";
  }

  static const char* value(const ::gui_path::point_SF_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gui_path::point_SF_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s_x);
      stream.next(m.s_y);
      stream.next(m.f_x);
      stream.next(m.f_y);
      stream.next(m.step_size);
      stream.next(m.bias_param);
      stream.next(m.max_iteration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct point_SF_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gui_path::point_SF_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gui_path::point_SF_<ContainerAllocator>& v)
  {
    s << indent << "s_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.s_x);
    s << indent << "s_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.s_y);
    s << indent << "f_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.f_x);
    s << indent << "f_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.f_y);
    s << indent << "step_size: ";
    Printer<int64_t>::stream(s, indent + "  ", v.step_size);
    s << indent << "bias_param: ";
    Printer<int64_t>::stream(s, indent + "  ", v.bias_param);
    s << indent << "max_iteration: ";
    Printer<int64_t>::stream(s, indent + "  ", v.max_iteration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GUI_PATH_MESSAGE_POINT_SF_H
